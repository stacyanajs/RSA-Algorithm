# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hBkSA3VV3g9Bn5i0VkpnVG_ejF8fAJ56

# **ALGORITMA RSA (Rivest -Shamir - Adleman)**
"""

import random
'''
Algoritma Euclid untuk menentukan faktor persekutuan terbesar (GCD)
Menggunakan iterasi untuk mempercepat prosesnya pada bilangan bulat yang lebih besar
'''
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a
'''
Algoritma Euclid yang diperluas digunakan untuk menemukan invers perkalian dari dua bilangan
'''
def invers_multiplicative(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi
    while e > 0:
        temp1 = temp_phi//e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y
    if temp_phi == 1:
        return d + phi
'''
Menguji apakah suatu bilangan merupakan bilangan prima
'''
def apakah_bilangan_prima(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True

def generate_key_pair(p, q):
    n = p * q
    # Phi adalah totien dari n
    phi = (p-1) * (q-1)
    # Pilih bilangan bulat e sedemikian rupa sehingga e dan phi(n) relatid prima
    e = random.randrange(1, phi)
    # Gunakan Algoritma Euclid untuk memastikan bahwa e dan phi(n) relatif prima
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)
    # Gunakan Algorima Euclid yang Diperluas untuk menghasilkan kunci privat
    d = invers_multiplicative(e, phi)
    # return pasangan kunci publik dan privat
    # Kunci publik adalah (e,n) dan kunci privat adalah (d,n)
    return ((e, n), (d, n))

def enkripsi(pk, plaintext):
    # Membuka kunci ke dalam komponennya
    key, n = pk
    # Mengonversi setiap huruf dalam teks ke angka berdasarkan karakter lalu menggunakan a^b mod m
    cipher = [pow(ord(char), key, n) for char in plaintext]
    # Mengembalikan array byte
    return cipher

def dekripsi(pk, ciphertext):
    # Membuka kunci ke dalam komponennya
    key, n = pk
    # Mengonversi setiap huruf dalam teks ke angka berdasarkan karakter lalu menggunakan a^b mod m
    plain = [pow(ord(char), key, n) for char in ciphertext]
    # Mengembalikan array byte
    return plain

def tampilkan_proses_enkripsi(pk, plaintext):
    key, n = pk
    for char in plaintext:
        encrypted_char = pow(ord(char), key, n)
        print(f"     Pesan: {char}, ASCII: {ord(char)}, Chipertext: {ord(char)}^{key} mod {n} = {encrypted_char}")

def tampilkan_proses_dekripsi(pk, ciphertext):
    key, n = pk
    for char in ciphertext:
        decrypted_char = pow(ord(char), key, n)
        print(f"     Ciphertext: {char}, ASCII: {ord(char)}, Dekripsi: {ord(char)}^{key} mod {n} = {decrypted_char}")


if __name__ == '__main__':
    print("===========================================================================================================")
    print("=================================== RSA Enkripsi / Dekripsi ===============================================")
    print(" ")

    while True:
        try:
            p = int(input(" - Masukkan bilangan prima (17, 19, 23, dll): "))
            q = int(input(" - Masukkan bilangan prima lainnya (bukan yang Anda masukkan di atas): "))
            if  p*q < 128:   # 128 tabel ascii
                raise ValueError('p dan q terlalu kecil, coba yang lebih besar')
            elif not (apakah_bilangan_prima(p) and apakah_bilangan_prima(q)):
                raise ValueError('Kedua angka harus bilangan prima')
            elif p == q:
                raise ValueError('p dan q tidak boleh sama')

            break
        except ValueError as e:
            if str(e).startswith("invalid literal for int() with base 10"):
                print("Invalid - Masukkan bilangan bulat!")
            else:
                print("Invalid -", str(e))

    print(" - Menghasilkan pasangan kunci publik / privat Anda sekarang . . .")

    publik, privat = generate_key_pair(p, q)

    print(" - Kunci publik Anda adalah ", publik, " dan kunci privat Anda adalah ", privat)

    while True:
        print("\nMenu:")
        print("1 - Enkripsi")
        print("2 - Dekripsi")
        print("3 - Keluar")

        pilihan = input("\nMasukkan pilihan Anda: ")

        if pilihan == '1':
            pesan = input("  - Masukkan pesan untuk dienkripsi: ")
            print("  - Mengenkripsi pesan dengan kunci public", publik,"...")
            tampilkan_proses_enkripsi(publik, pesan)
            pesan_terenkripsi = enkripsi(publik, pesan)
            desimal_ciphertext = ' '.join(map(str, pesan_terenkripsi))
            text_ciphertext = ''.join(map(lambda x: chr(x), pesan_terenkripsi))

            print("  - Desimal Ciphertext:", desimal_ciphertext)
            print("  - Text Ciphertext:"+text_ciphertext)

        elif pilihan == '2':
            ciphertext = input(" - Masukkan teks ciphertext Anda: ")
            print("  - Mendekripsi teks ciphertext dengan kunci privat", privat,"...")
            tampilkan_proses_dekripsi(privat, ciphertext)
            pesan_terdekripsi = dekripsi(privat, ciphertext)
            desimal_plaintext = ' '.join(map(str, pesan_terdekripsi))
            text_plaintext = ''.join(map(lambda x: chr(x), pesan_terdekripsi))

            print("  - Desimal Plaintext:", desimal_plaintext)
            print("  - Teks Plaintext Anda adalah:"+ text_plaintext)

        elif pilihan == '3':
            print("Keluar dari program...")
            break

        else:
            print("Pilihan tidak valid. Silakan coba lagi.")

    print(" ")
    print("============================================ SELESAI ==========================================================")
    print("===============================================================================================================")